import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 2, -4, -6, -2, 8};
        int target = 4;
        List<List<Integer>> first_combinations = find_combinations(arr, target);
        int[] merged_array = Arrays.stream(arr).sorted().toArray();
        int doubled_target = target * 2;
        List<List<Integer>> second_combinations = find_combinations_helper(merged_array, new ArrayList<>(), 0, doubled_target);
        System.out.println("First Combination For " + target + ": " + first_combinations);
        System.out.println("Merge Into a single Array: " + Arrays.toString(merged_array));
        System.out.println("Second Combination For " + doubled_target + ": " + second_combinations);
    }

    public static List<List<Integer>> find_combinations(int[] arr, int target) {
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] + arr[j] == target) {
                    result.add(Arrays.asList(arr[i], arr[j]));
                }
            }
        }
        return result;
    }

    public static List<List<Integer>> find_combinations_helper(int[] arr, List<Integer> curr_combination,int start, int doubled_target) {
        List<List<Integer>> combinations = new ArrayList<>();
        if (doubled_target==0) {
            combinations.add(new ArrayList<>(curr_combination));
            return combinations;
        } 
            
        
        for (int i = start; i < arr.length; i++) { 
            if (i > start && arr[i] == arr[i - 1]) {
                continue;
            }
            curr_combination.add(arr[i]);
             combinations.addAll(find_combinations_helper(arr, curr_combination, i + 1, doubled_target-arr[i]));
            curr_combination.remove(curr_combination.size() - 1);
        }
        return combinations;
    }
}
